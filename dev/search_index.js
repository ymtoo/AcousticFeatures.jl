var documenterSearchIndex = {"docs":
[{"location":"acousticfeatures.html#Docstrings","page":"Docstrings","title":"Docstrings","text":"","category":"section"},{"location":"acousticfeatures.html","page":"Docstrings","title":"Docstrings","text":"Modules = [AcousticFeatures]\nPages   = [\"AcousticFeatures.jl\"]","category":"page"},{"location":"acousticfeatures.html#AcousticFeatures.Score-Union{Tuple{T}, Tuple{AcousticFeatures.AbstractAcousticFeature,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.Score","text":"Score(\n    f::AcousticFeatures.AbstractAcousticFeature,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\";\n    winlen,\n    noverlap,\n    preprocess,\n    showprogress\n) -> Any\n\n\nCompute acoustic feature f scores of a SampledSignal x using sliding windows. \n\nBy default, window length winlen is the length of x, i.e., the whole signal is used to compute  a score, and overlapping samples noverlap is 0. The padtype specifies the form of padding, and for more information, refer to ImageFiltering.jl. The signal is subject to preliminary processing preprocess. Acoustic feature scores of subseqences can be computed through mapping  map. showprogress is used to monitor the computations.\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.Score-Union{Tuple{T}, Tuple{AcousticFeatures.AbstractAcousticFeature,Union{AbstractArray{T,1}, AbstractArray{T,2}}}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.Score","text":"Score(\n    f::AcousticFeatures.AbstractAcousticFeature,\n    x::Union{AbstractArray{T<:Real,1}, AbstractArray{T<:Real,2}};\n    fs,\n    winlen,\n    noverlap,\n    preprocess,\n    showprogress\n) -> Any\n\n\nCompute acoustic feature f scores of a signal x using sliding windows. \n\nBy default, sampling rate fs is one, window length winlen is the length of x, i.e., the whole signal is used to compute  a score, and overlapping samples noverlap is 0. The padtype specifies the form of padding, and for more information, refer to ImageFiltering.jl. The signal is subject to preliminary processing preprocess. Acoustic feature scores of subseqences can be computed through mapping  map. showprogress is used to monitor the computations.\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{S}, Tuple{T}, Tuple{Myriad{S},AbstractArray{T,1}}} where S<:Real where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::Myriad{S<:Real},\n    x::AbstractArray{T<:Real,1}\n) -> Array{_A,1} where _A\n\n\nScore of x based on myriad.\n\nReference:\n\nMahmood et. al., \"Optimal and Near-Optimal Detection in Bursty Impulsive Noise,\" IEEE Journal of Oceanic Engineering, vol. 42, no. 3, pp. 639–653, 2016.\n\nExamples:\n\njulia> x = Score(Myriad(), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Myriad\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 30884.887026311182\n\njulia> x = Score(Myriad(), randn(9600); winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Myriad\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 34705.27101918274\n ⋮\n 34616.48633137812\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{AcousticComplexityIndex,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::AcousticComplexityIndex,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Array{_A,1} where _A\n\n\nScore of x based on Acoustic Complexity Index. jbin is the temporal size of a sub-spectrogram. \n\nReference:\n\nN. Pieretti, A. Farina, D. Morri, \"A new methodology to infer the singing activity of an avian community: The Acoustic Complexity Index (ACI)\", 2011.\n\nExamples:\n\njulia> x = Score(AcousticComplexityIndex(1024, 0, 30), randn(960000); fs = 96000)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Acoustic Complexity Index\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 9055.209860502793\n\n julia> x = Score(AcousticComplexityIndex(1024, 0, 30), randn(960000), winlen=96000, noverlap=48000, fs=96000)\n 3-dimensional AxisArray{Float64,3,...} with axes:\n     :sample, [1, 48001, 96001, 144001, 192001, 240001, 288001, 336001, 384001, 432001, 480001, 528001, 576001, 624001, 672001, 720001, 768001, 816001, 864001]\n     :feature, [\"Acoustic Complexity Index\"]\n     :channel, [1]\n And data, a 19×1×1 Array{Float64, 3}:\n [:, :, 1] =\n 874.3303017743206\n ⋮\n 875.986826332567\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{AcousticDiversityIndex,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::AcousticDiversityIndex,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Array{_A,1} where _A\n\n\nScore of x based on acoustic diversity index.\n\nReference\n\nVillanueva-Rivera, L. J., B. C. Pijanowski, J. Doucette, and B. Pekin. 2011. A primer of acoustic analysis for landscape ecologists. Landscape Ecology 26: 1233-1246.\nhttps://github.com/patriceguyot/Acoustic_Indices\n\nExamples:\n\n```julia-repl julia> x = Score(AcousticDiversityIndex(256, 128, 50, (50, 1000)), randn(9600); fs = 2000) 3-dimensional AxisArray{Float64,3,...} with axes:     :sample, [1]     :feature, [\"Acoustic Diversity Index\"]     :channel, [1] And data, a 1×1×1 Array{Float64, 3}: [:, :, 1] =  2.833213240809075\n\njulia> x = Score(AcousticDiversityIndex(256, 128, 50, (50, 1000)), randn(9600); winlen = 960, noverlap = 480, fs = 2000) 3-dimensional AxisArray{Float64,3,...} with axes:     :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]     :feature, [\"Acoustic Diversity Index\"]     :channel, [1] And data, a 19×1×1 Array{Float64, 3}: [:, :, 1] =  2.833213344056216  ⋮  2.833213344056216\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{Energy,AbstractArray{T,1}}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    _::Energy,\n    x::AbstractArray{T<:Real,1}\n) -> Array{_A,1} where _A\n\n\nScore of x based on mean energy.\n\nExamples:\n\njulia> x = Score(Energy(), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Energy\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 1.001273328811565\n\njulia> x = Score(Energy(), randn(9600); winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Energy\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.9896401818968652\n ⋮\n 0.9602549596080265\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{Entropy,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::Entropy,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Array{_A,1} where _A\n\n\nScore of x based on temporal entropy, spectral entropy and entropy index.\n\nReference:\n\nJ. Sueur, A. Farina, A. Gasc, N. Pieretti, S. Pavoine, Acoustic Indices for Biodiversity Assessment and Landscape Investigation, 2014.\n\nExamples:\n\njulia> x = Score(Entropy(96, 48), randn(9600); fs=9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Temporal Entropy\", \"Spectral Entropy\", \"Entropy Index\"]\n    :channel, [1]\nAnd data, a 1×3×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.984822  0.998127  0.982977\n\njulia> x = Score(Entropy(96, 48), randn(9600); winlen=960, noverlap=480, fs=9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Temporal Entropy\", \"Spectral Entropy\", \"Entropy Index\"]\n    :channel, [1]\nAnd data, a 19×3×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.980493  0.988433  0.969152\n ⋮                   \n 0.979868  0.987179  0.967305\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{FrequencyContours,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::FrequencyContours,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Array{_A,1} where _A\n\n\nScore of x based on frequency contours count.\n\nReference:\n\nD. Mellinger, R. Morrissey, L. Thomas, J. Yosco, \"A method for detecting whistles, moans, and other frequency contour sounds\", 2011 J. Acoust. Soc. Am. 129 4055\n\nExamples:\n\njulia> x = Score(FrequencyContours(512, 256, 1.0, 1000.0, 99.0, 1000.0, 0.05), randn(9600); fs=9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Frequency Contours\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.004539559014267186\n\njulia> x = Score(FrequencyContours(512, 256, 1.0, 1000.0, 99.0, 1000.0, 0.05), randn(9600); winlen=960, noverlap=480, fs=9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Frequency Contours\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.0\n ⋮\n 0.0\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{ImpulseStats,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::ImpulseStats,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Array{_A,1} where _A\n\n\nScore of x based on number of impulses, mean and variance of inter-impulse intervals. The minimum height of impulses is defined by a+k*b where a is median of the envelope of x and b is median absolute deviation (MAD) of the envelope of x.\n\nReference:\n\nMatthew W Legg et al., \"Analysis of impulsive biological noise due to snapping shrimp as a point process in time\", 2007.\n\nExamples:\n\njulia> x = Score(ImpulseStats(10, 0.01), randn(9600); fs = 9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Nᵢ\", \"μᵢᵢ\", \"varᵢᵢ\"]\n    :channel, [1]\nAnd data, a 1×3×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.0  NaN  NaN\n\njulia> x = Score(ImpulseStats(10, 0.01), randn(9600); winlen=960, noverlap=480, fs=9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Nᵢ\", \"μᵢᵢ\", \"varᵢᵢ\"]\n    :channel, [1]\nAnd data, a 19×3×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.0  NaN  NaN\n ⋮               \n 0.0  NaN  NaN\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{PSD,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::PSD,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Any\n\n\nScore of x based on power spectral density in dB scale.\n\nExamples:\n\njulia> x = Score(PSD(64, 32, 96000), randn(9600); fs=96000)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"PSD-0.0Hz\", \"PSD-1500.0Hz\", \"PSD-3000.0Hz\", \"PSD-4500.0Hz\", \"PSD-6000.0Hz\", \"PSD-7500.0Hz\", \"PSD-9000.0Hz\", \"PSD-10500.0Hz\", \"PSD-12000.0Hz\", \"PSD-13500.0Hz\"  …  \"PSD-34500.0Hz\", \"PSD-36000.0Hz\", \"PSD-37500.0Hz\", \"PSD-39000.0Hz\", \"PSD-40500.0Hz\", \"PSD-42000.0Hz\", \"PSD-43500.0Hz\", \"PSD-45000.0Hz\", \"PSD-46500.0Hz\", \"PSD-48000.0Hz\"]\n    :channel, [1]\nAnd data, a 1×33×1 Array{Float64, 3}:\n[:, :, 1] =\n -50.1861  …  -46.536  -49.8058\n\njulia> x = Score(PSD(64, 32, 96000), randn(9600), winlen=960, noverlap=480, fs=96000)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"PSD-0.0Hz\", \"PSD-1500.0Hz\", \"PSD-3000.0Hz\", \"PSD-4500.0Hz\", \"PSD-6000.0Hz\", \"PSD-7500.0Hz\", \"PSD-9000.0Hz\", \"PSD-10500.0Hz\", \"PSD-12000.0Hz\", \"PSD-13500.0Hz\"  …  \"PSD-34500.0Hz\", \"PSD-36000.0Hz\", \"PSD-37500.0Hz\", \"PSD-39000.0Hz\", \"PSD-40500.0Hz\", \"PSD-42000.0Hz\", \"PSD-43500.0Hz\", \"PSD-45000.0Hz\", \"PSD-46500.0Hz\", \"PSD-48000.0Hz\"]\n    :channel, [1]\nAnd data, a 19×33×1 Array{Float64, 3}:\n[:, :, 1] =\n -52.0638  -48.6761  …  -49.5882\n  ⋮                                                                        \n -47.6196  -48.6223     -49.3313\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{PermutationEntropy,AbstractArray{T,1}}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::PermutationEntropy,\n    x::AbstractArray{T<:Real,1}\n) -> Array{Float64,1}\n\n\nScore of x based on permutation entropy.\n\nReference:\n\nC. Bandt, B. Pompe, \"Permutation entropy: a natural complexity measure for time series\",    Phys. Rev. Lett., 88 (17), 2002\nB. Fadlallah, B. Chen, A. Keil, and J. Príncipe, “Weighted-permutation entropy: a complexity    measure for time series incorporating amplitude information,” Physical Review E: Statistical,    Nonlinear, and Soft Matter Physics, vol. 87, no. 2, Article ID 022911, 2013. \n\nExamples:\n\njulia> x = Score(PermutationEntropy(7), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Permutation Entropy\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.964174724342896\n\njulia> x = Score(PermutationEntropy(7), randn(9600), winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Permutation Entropy\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.7892209267573311\n ⋮\n 0.7887095679636025\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{SoundPressureLevel,AbstractArray{T,1}}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::SoundPressureLevel,\n    x::AbstractArray{T<:Real,1}\n) -> Array{_A,1} where _A\n\n\nScore of x based on Sound Pressure Level (SPL). x is in micropascal. In water, the common reference ref is 1 micropascal. In air, the common reference ref is 20 micropascal.\n\nExamples:\n\njulia> x = Score(SoundPressureLevel(), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"SPL\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n -0.023514452445490917\n\njulia> x = Score(SoundPressureLevel(), randn(9600); winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"SPL\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n  0.1844558527671365\n  ⋮\n -0.12184606185171237\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{SpectralCentroid,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    _::SpectralCentroid,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Array{_A,1} where _A\n\n\nScore of x based on spectral centroid.\n\nReference:\n\nhttps://en.wikipedia.org/wiki/Spectral_centroid\n\nExamples:\n\njulia> x = Score(SpectralCentroid(), randn(9600); fs=9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Spectral Centroid\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 2406.918897946181\n\njulia> x = Score(SpectralCentroid(), randn(9600); winlen=960, noverlap=480, fs=9600)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Spectral Centroid\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 2470.7611082156754\n ⋮\n 2421.4182047609647\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{SpectralFlatness,AbstractArray{T,1}}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    _::SpectralFlatness,\n    x::AbstractArray{T<:Real,1}\n) -> Array{_A,1} where _A\n\n\nScore of x based on spectral flatness.\n\nReference:\n\nhttps://en.wikipedia.org/wiki/Spectral_flatness\n\nExamples:\n\njulia> x = Score(SpectralFlatness(), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Spectral Flatness\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.5703906724982125\n\njulia> x = Score(SpectralFlatness(), randn(9600); winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Spectral Flatness\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.5338443405802898\n ⋮\n 0.5704666324591952\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{StatisticalComplexity,MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T,N} where N where var\"#s13\"}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    f::StatisticalComplexity,\n    x::MetaArrays.MetaArray{var\"#s13\",SignalAnalysis.SamplingInfo,T<:Real,N} where N where var\"#s13\"\n) -> Array{Float64,1}\n\n\nScore of x based on statistical complexity.\n\nReference:\n\nLopez-Ruiz, R., Mancini, H. L., & Calbet, X. (1995). A Statistical Measure of Complexity.    Physics Letters A, 209, 321-326.\nA. A. B. Pessa, H. V. Ribeiro, ordpy: A Python package for data analysis with permutation entropy    and ordinal network methods, Chaos 31, 063110 (2021).\n\nExamples:\n\njulia> x = Score(StatisticalComplexity(7), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"Statistical Complexity\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.1203920737205638\n\njulia> x = Score(StatisticalComplexity(7), randn(9600); winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"Statistical Complexity\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.5155574606285804\n ⋮\n 0.515770942278282\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{SymmetricAlphaStableStats,AbstractArray{T,1}}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    _::SymmetricAlphaStableStats,\n    x::AbstractArray{T<:Real,1}\n) -> Array{_A,1} where _A\n\n\nScore of x based on the parameters of Symmetric Alpha Stable Distributions. The parameter α measures the impulsiveness while the parameter scale measures the width of the distributions.\n\nReference:\n\nhttps://github.com/org-arl/AlphaStableDistributions.jl\n\nExamples:\n\njulia> x = Score(SymmetricAlphaStableStats(), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"α\", \"scale\"]\n    :channel, [1]\nAnd data, a 1×2×1 Array{Float64, 3}:\n[:, :, 1] =\n 1.97123  0.701582\n\njulia> x = Score(SymmetricAlphaStableStats(), randn(9600); winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"α\", \"scale\"]\n    :channel, [1]\nAnd data, a 19×2×1 Array{Float64, 3}:\n[:, :, 1] =\n 1.86815  0.66576\n ⋮        \n 2.0      0.678246\n\n\n\n\n\n","category":"method"},{"location":"acousticfeatures.html#AcousticFeatures.score-Union{Tuple{T}, Tuple{ZeroCrossingRate,AbstractArray{T,1}}} where T<:Real","page":"Docstrings","title":"AcousticFeatures.score","text":"score(\n    _::ZeroCrossingRate,\n    x::AbstractArray{T<:Real,1}\n) -> Array{_A,1} where _A\n\n\nScore of x based on zero crossing rate.\n\nRefernce:\n\nhttps://en.wikipedia.org/wiki/Zero-crossing_rate\n\nExamples:\n\njulia> x = Score(ZeroCrossingRate(), randn(9600))\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1]\n    :feature, [\"ZCR\"]\n    :channel, [1]\nAnd data, a 1×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.497239295759975\n\njulia> x = Score(ZeroCrossingRate(), randn(9600); winlen=960, noverlap=480)\n3-dimensional AxisArray{Float64,3,...} with axes:\n    :sample, [1, 481, 961, 1441, 1921, 2401, 2881, 3361, 3841, 4321, 4801, 5281, 5761, 6241, 6721, 7201, 7681, 8161, 8641]\n    :feature, [\"ZCR\"]\n    :channel, [1]\nAnd data, a 19×1×1 Array{Float64, 3}:\n[:, :, 1] =\n 0.516162669447341\n ⋮\n 0.470281543274244\n\n\n\n\n\n","category":"method"},{"location":"index.html#AcousticFeatures-Package","page":"AcousticFeatures Package","title":"AcousticFeatures Package","text":"","category":"section"},{"location":"index.html","page":"AcousticFeatures Package","title":"AcousticFeatures Package","text":"This package implements a set of methods to compute generic acoustic features in AxisArrays for 1-D time series acoustic data.","category":"page"}]
}
